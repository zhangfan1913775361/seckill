<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--配置整合Mybatis的过程 -->
    <!--1.配置数据库相关参数：properties的属性，用${url}的格式-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--2.数据库连接池-->
    <bean id = "dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <!--<bean id = "dataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
        <!--配置连接池属性！！即常见的那几个参数-->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--配置连接池（这里是c3p0）的私有属性-->
        <property name="maxPoolSize" value="300"/>
        <property name="minPoolSize" value="1"/>
        <!--关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false"/>
        <!--获取连接的超时时间-->
        <property name="checkoutTimeout" value="1000"/>
        <!--当获取连接失败重试的次数-->
        <property name="acquireRetryAttempts" value="20"/>
    </bean>
    <!-- 3.配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--下面才真是mybatis和spring整合的步骤！！！！-->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包，可以节约配置！！！使用别名-->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!--扫描sql配置文件，即mapper需要的xml文件，也是节约配置的重要一步-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!--4.最后一步，配置扫描DAO接口包，为了启动容器时，动态的实现DAO接口，注入到spring容器中-->
    <!--这里因为没有其他引用了，在spring容器中也不用找到它，只用这一次，所以不用写id也没事-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory  -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--扫描dao包，并注入spring容器中。-->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>

</beans>

<!--总结，约定大于配置！！！！也就是说，你自己可以灵活的写你和spring的约定，让它自己扫描，省去了繁琐的配置-->